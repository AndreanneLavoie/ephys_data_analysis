function spikes = create_spikes_phy()
%this code will create a structure called spikes which will hold all of the
%data required for data analysis after Phy (manual spike sorting)

%data from different sources should be collected together in a folder three seperate folders, 
%organised by location/software used to generate the data; 

    % This includes: 
% -> From IntanData -- folder containing raw ephys data,'info.rhd', 'time.dat', 'board-ADC-00.dat' (00-04)(record of analog inputs for different stim; led, eye track, vs timing, behaviour etc.)
% -> From Psychopy -- order of stimuli ( 'expName_date.npy' ),
% -> From Kilosort -- 'spike_times.npy', 'spike_clusters.npy'
% -> From Phy --  'cluster_groups.csv'

%must have .npy to matlab installed from https://github.com/kwikteam/npy-matlab

%location of Intan data stored: 
[intandata_path, frequency_parameters] = read_Intan_RHD2000_file; %the chosen folder path wil have the same exp name as vs

%extract experiment name and extrapolate path for different types of data using the Intan info.rhd file selected;

%find index of key markers in the intandata filename
gen_path_ind = strfind(intandata_path, 'IntanData'); %28 (index of 'I' in IntaData) 
exp_ind = strfind(intandata_path, '_ephys'); %index of '_' in _ephys 

%using indexes and intandata filename to assign path of the other data
%folders (visual stimulus) and set new path to kilosort file where analysed
%data will be saved
general_path = intandata_path(1:gen_path_ind - 1); %'E:\extarcellular\Andreanne\'
exp_name = intandata_path(gen_path_ind + 10 : exp_ind - 1); %everything between 'IntanData\' and '_ephys' 
kilosortdata_path = [general_path 'KilosortData\' exp_name '\'];
date = intandata_path((exp_ind + 6):(exp_ind + 12)); %e.g. '_190223'
vspara_path = [general_path 'VSpara\' exp_name date '.csv']; %'E:\extarcellular\Andreanne\VSpara\expName_date'
 

spikes.abs_spiketimes = double(readNPY([kilosortdata_path 'spike_times.npy']))/double(frequency_parameters.amplifier_sample_rate); %absolute time point for each spike   
spikes.vs_params = csvread(vspara_path);
threshold=1.8;
digfilter_winT=0.0006; %in sec
spikes.vstiming = vs_time2('time.dat', 'board-ADC-00.dat', intandata_path, threshold,digfilter_winT);

spikes.trigtiming= vs_time2('time.dat', 'board-ADC-01.dat', intandata_path, threshold,digfilter_winT); %visual stim trigger times

%Both spiketimes, trials and stimcond are genereated together; 
%spiketimes: relative time of spike to trigger;
%stimcond: the type of stimulus associated with each spike, given the closest trigger vsstim
%stimorder: trigger identity
spikes = make_spike_struct(spikes);

%cluster / unit identity of each spikes
spikes.assigns = readNPY([kilosortdata_path 'spike_clusters.npy'])';

%determine if phy has been analyzed on data; 
isfound = dir([kilosortdata_path 'cluster_groups.csv']);

%if phy has been run, store the label of each cluster (ie good, MUA (multi-unit activity) or noise);
%GENERATED BY PHY;
%NOTE -> label values: 0=noise, 1=mua, 2 = good, 3=unsorted; 4 = fast
%spiking; 5=reg spiking
try length(isfound.name) 
    
    [clusterID, labels] = readClusterGroupsCSV([kilosortdata_path 'cluster_groups.csv']); %identity of cluster 
    spikes.labels = [clusterID' labels'];
    spikes.cluster_annotation = cell(6, 2);
    annotation_list = {'noise' 'mua' 'good' 'unsorted' 'fast' 'reg'};

    for i = 1:size(spikes.cluster_annotation, 1)
        spikes.cluster_annotation{i,1} = i - 1;
        spikes.cluster_annotation{i,2} = annotation_list{i};
    end

%%%%ADD Check wether each cluster violates the refractory period and assign a
%number to quantify the 'contamination' of the cluster;
%spikes.ref_period = 

save([kilosortdata_path 'spikes.mat'], 'spikes');

end
